C-x C-e: evaluate Emacs Lisp-expression (cursor on end of line first maybe)
(slide "start" "capy")

Emacs Lisp-evaluating (start-lamb) should start SML
and then (start-lamb) should start the lambda-thing
and (stop-lamb) should stop the lambda-thing

(start-stuff)
(start-lamb)
(stop-lamb)



C-d: ≜
C-l: λ

C-e: add definition or do one step of evaluation

like, cursor somewhere on next line and do C-e:
I ≜ λx.x

C-S-e: evaluate until normal form, or like at least 1000 steps
C-r: replace names of things you have defined with their definitions

like, cursor on next line, C-r, then C-e or C-S-e:
I I I I foo


Renaming variables to avoid capture counts as one step:
like,
λx.(λy.λx.y) x

*~*~*~*~*~*~*~*~*

(slide "rules")

(slide "ls" "ls")

(slide "ruleses")

*~*~* stuff *~*~*

(slide "little" "plus")

(slide "numfold")

*~*~* stuff *~*~*

(slide "plusses")

*~*~* stuff *~*~*

(slide "terror" "c")

*~*~* stuff *~*~*

(slide "plusses")

*~*~* stuff *~*~*
