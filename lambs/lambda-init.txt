C-x C-e: evaluate Emacs Lisp-expression (cursor on end of line first maybe)
(slide "start" "capy")

Emacs Lisp-evaluating (start-lamb) should start the lambda-thing:
(start-lamb)

C-d: ≜
C-l: λ

C-e: add definition, eval or do one step of evaluation

like, cursor somewhere on next line and do C-e:
I ≜ λx.x

C-S-e: evaluate until normal form, or like at least 1000 steps
C-r: replace names of things you have defined with their definitions

like, cursor on next line, C-r, then C-e or C-S-e:
I I I I foo


Renaming variables to avoid capture counts as one step:
like,
λx.(λy.λx.y) x

There's a buch of definitions in the cheat-slide:
(slide "cheat")


(slide "rules")

*~*~* stuff *~*~*

(slide "pred")

*~*~* stuff *~*~*

(slide "numlist1")
(slide "numlist2")

*~*~* stuff *~*~*

(slide "foldquote")
(slide "listfolds")

(slide "numfold")

*~*~* stuff *~*~*
